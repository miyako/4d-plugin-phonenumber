// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonenumber.proto

#ifndef PROTOBUF_INCLUDED_phonenumber_2eproto
#define PROTOBUF_INCLUDED_phonenumber_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_phonenumber_2eproto 

namespace protobuf_phonenumber_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_phonenumber_2eproto
namespace i18n {
namespace phonenumbers {
class PhoneNumber;
class PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
namespace google {
namespace protobuf {
template<> ::i18n::phonenumbers::PhoneNumber* Arena::CreateMaybeMessage<::i18n::phonenumbers::PhoneNumber>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace i18n {
namespace phonenumbers {

enum PhoneNumber_CountryCodeSource {
  PhoneNumber_CountryCodeSource_UNSPECIFIED = 0,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN = 1,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD = 5,
  PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
  PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY = 20
};
bool PhoneNumber_CountryCodeSource_IsValid(int value);
const PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MIN = PhoneNumber_CountryCodeSource_UNSPECIFIED;
const PhoneNumber_CountryCodeSource PhoneNumber_CountryCodeSource_CountryCodeSource_MAX = PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
const int PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE = PhoneNumber_CountryCodeSource_CountryCodeSource_MAX + 1;

// ===================================================================

class PhoneNumber : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneNumber) */ {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneNumber(PhoneNumber&& from) noexcept
    : PhoneNumber() {
    *this = ::std::move(from);
  }

  inline PhoneNumber& operator=(PhoneNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PhoneNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const PhoneNumber*>(
               &_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PhoneNumber* other);
  friend void swap(PhoneNumber& a, PhoneNumber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneNumber* New() const final {
    return CreateMaybeMessage<PhoneNumber>(NULL);
  }

  PhoneNumber* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneNumber>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhoneNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PhoneNumber_CountryCodeSource CountryCodeSource;
  static const CountryCodeSource UNSPECIFIED =
    PhoneNumber_CountryCodeSource_UNSPECIFIED;
  static const CountryCodeSource FROM_NUMBER_WITH_PLUS_SIGN =
    PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN;
  static const CountryCodeSource FROM_NUMBER_WITH_IDD =
    PhoneNumber_CountryCodeSource_FROM_NUMBER_WITH_IDD;
  static const CountryCodeSource FROM_NUMBER_WITHOUT_PLUS_SIGN =
    PhoneNumber_CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN;
  static const CountryCodeSource FROM_DEFAULT_COUNTRY =
    PhoneNumber_CountryCodeSource_FROM_DEFAULT_COUNTRY;
  static inline bool CountryCodeSource_IsValid(int value) {
    return PhoneNumber_CountryCodeSource_IsValid(value);
  }
  static const CountryCodeSource CountryCodeSource_MIN =
    PhoneNumber_CountryCodeSource_CountryCodeSource_MIN;
  static const CountryCodeSource CountryCodeSource_MAX =
    PhoneNumber_CountryCodeSource_CountryCodeSource_MAX;
  static const int CountryCodeSource_ARRAYSIZE =
    PhoneNumber_CountryCodeSource_CountryCodeSource_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string extension = 3;
  bool has_extension() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  const ::std::string& extension() const;
  void set_extension(const ::std::string& value);
  #if LANG_CXX11
  void set_extension(::std::string&& value);
  #endif
  void set_extension(const char* value);
  void set_extension(const char* value, size_t size);
  ::std::string* mutable_extension();
  ::std::string* release_extension();
  void set_allocated_extension(::std::string* extension);

  // optional string raw_input = 5;
  bool has_raw_input() const;
  void clear_raw_input();
  static const int kRawInputFieldNumber = 5;
  const ::std::string& raw_input() const;
  void set_raw_input(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_input(::std::string&& value);
  #endif
  void set_raw_input(const char* value);
  void set_raw_input(const char* value, size_t size);
  ::std::string* mutable_raw_input();
  ::std::string* release_raw_input();
  void set_allocated_raw_input(::std::string* raw_input);

  // optional string preferred_domestic_carrier_code = 7;
  bool has_preferred_domestic_carrier_code() const;
  void clear_preferred_domestic_carrier_code();
  static const int kPreferredDomesticCarrierCodeFieldNumber = 7;
  const ::std::string& preferred_domestic_carrier_code() const;
  void set_preferred_domestic_carrier_code(const ::std::string& value);
  #if LANG_CXX11
  void set_preferred_domestic_carrier_code(::std::string&& value);
  #endif
  void set_preferred_domestic_carrier_code(const char* value);
  void set_preferred_domestic_carrier_code(const char* value, size_t size);
  ::std::string* mutable_preferred_domestic_carrier_code();
  ::std::string* release_preferred_domestic_carrier_code();
  void set_allocated_preferred_domestic_carrier_code(::std::string* preferred_domestic_carrier_code);

  // required uint64 national_number = 2;
  bool has_national_number() const;
  void clear_national_number();
  static const int kNationalNumberFieldNumber = 2;
  ::google::protobuf::uint64 national_number() const;
  void set_national_number(::google::protobuf::uint64 value);

  // required int32 country_code = 1;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 1;
  ::google::protobuf::int32 country_code() const;
  void set_country_code(::google::protobuf::int32 value);

  // optional bool italian_leading_zero = 4;
  bool has_italian_leading_zero() const;
  void clear_italian_leading_zero();
  static const int kItalianLeadingZeroFieldNumber = 4;
  bool italian_leading_zero() const;
  void set_italian_leading_zero(bool value);

  // optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
  bool has_country_code_source() const;
  void clear_country_code_source();
  static const int kCountryCodeSourceFieldNumber = 6;
  ::i18n::phonenumbers::PhoneNumber_CountryCodeSource country_code_source() const;
  void set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value);

  // optional int32 number_of_leading_zeros = 8 [default = 1];
  bool has_number_of_leading_zeros() const;
  void clear_number_of_leading_zeros();
  static const int kNumberOfLeadingZerosFieldNumber = 8;
  ::google::protobuf::int32 number_of_leading_zeros() const;
  void set_number_of_leading_zeros(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneNumber)
 private:
  void set_has_country_code();
  void clear_has_country_code();
  void set_has_national_number();
  void clear_has_national_number();
  void set_has_extension();
  void clear_has_extension();
  void set_has_italian_leading_zero();
  void clear_has_italian_leading_zero();
  void set_has_number_of_leading_zeros();
  void clear_has_number_of_leading_zeros();
  void set_has_raw_input();
  void clear_has_raw_input();
  void set_has_country_code_source();
  void clear_has_country_code_source();
  void set_has_preferred_domestic_carrier_code();
  void clear_has_preferred_domestic_carrier_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr extension_;
  ::google::protobuf::internal::ArenaStringPtr raw_input_;
  ::google::protobuf::internal::ArenaStringPtr preferred_domestic_carrier_code_;
  ::google::protobuf::uint64 national_number_;
  ::google::protobuf::int32 country_code_;
  bool italian_leading_zero_;
  int country_code_source_;
  ::google::protobuf::int32 number_of_leading_zeros_;
  friend struct ::protobuf_phonenumber_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhoneNumber

// required int32 country_code = 1;
inline bool PhoneNumber::has_country_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhoneNumber::set_has_country_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhoneNumber::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhoneNumber::clear_country_code() {
  country_code_ = 0;
  clear_has_country_code();
}
inline ::google::protobuf::int32 PhoneNumber::country_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.country_code)
  return country_code_;
}
inline void PhoneNumber::set_country_code(::google::protobuf::int32 value) {
  set_has_country_code();
  country_code_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.country_code)
}

// required uint64 national_number = 2;
inline bool PhoneNumber::has_national_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhoneNumber::set_has_national_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhoneNumber::clear_has_national_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhoneNumber::clear_national_number() {
  national_number_ = GOOGLE_ULONGLONG(0);
  clear_has_national_number();
}
inline ::google::protobuf::uint64 PhoneNumber::national_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.national_number)
  return national_number_;
}
inline void PhoneNumber::set_national_number(::google::protobuf::uint64 value) {
  set_has_national_number();
  national_number_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.national_number)
}

// optional string extension = 3;
inline bool PhoneNumber::has_extension() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhoneNumber::set_has_extension() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhoneNumber::clear_has_extension() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhoneNumber::clear_extension() {
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension();
}
inline const ::std::string& PhoneNumber::extension() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.extension)
  return extension_.GetNoArena();
}
inline void PhoneNumber::set_extension(const ::std::string& value) {
  set_has_extension();
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.extension)
}
#if LANG_CXX11
inline void PhoneNumber::set_extension(::std::string&& value) {
  set_has_extension();
  extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneNumber.extension)
}
#endif
inline void PhoneNumber::set_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension();
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumber.extension)
}
inline void PhoneNumber::set_extension(const char* value, size_t size) {
  set_has_extension();
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumber.extension)
}
inline ::std::string* PhoneNumber::mutable_extension() {
  set_has_extension();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.extension)
  return extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneNumber::release_extension() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.extension)
  if (!has_extension()) {
    return NULL;
  }
  clear_has_extension();
  return extension_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneNumber::set_allocated_extension(::std::string* extension) {
  if (extension != NULL) {
    set_has_extension();
  } else {
    clear_has_extension();
  }
  extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.extension)
}

// optional bool italian_leading_zero = 4;
inline bool PhoneNumber::has_italian_leading_zero() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PhoneNumber::set_has_italian_leading_zero() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PhoneNumber::clear_has_italian_leading_zero() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PhoneNumber::clear_italian_leading_zero() {
  italian_leading_zero_ = false;
  clear_has_italian_leading_zero();
}
inline bool PhoneNumber::italian_leading_zero() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.italian_leading_zero)
  return italian_leading_zero_;
}
inline void PhoneNumber::set_italian_leading_zero(bool value) {
  set_has_italian_leading_zero();
  italian_leading_zero_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.italian_leading_zero)
}

// optional int32 number_of_leading_zeros = 8 [default = 1];
inline bool PhoneNumber::has_number_of_leading_zeros() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PhoneNumber::set_has_number_of_leading_zeros() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PhoneNumber::clear_has_number_of_leading_zeros() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PhoneNumber::clear_number_of_leading_zeros() {
  number_of_leading_zeros_ = 1;
  clear_has_number_of_leading_zeros();
}
inline ::google::protobuf::int32 PhoneNumber::number_of_leading_zeros() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.number_of_leading_zeros)
  return number_of_leading_zeros_;
}
inline void PhoneNumber::set_number_of_leading_zeros(::google::protobuf::int32 value) {
  set_has_number_of_leading_zeros();
  number_of_leading_zeros_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.number_of_leading_zeros)
}

// optional string raw_input = 5;
inline bool PhoneNumber::has_raw_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhoneNumber::set_has_raw_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhoneNumber::clear_has_raw_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhoneNumber::clear_raw_input() {
  raw_input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_input();
}
inline const ::std::string& PhoneNumber::raw_input() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.raw_input)
  return raw_input_.GetNoArena();
}
inline void PhoneNumber::set_raw_input(const ::std::string& value) {
  set_has_raw_input();
  raw_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.raw_input)
}
#if LANG_CXX11
inline void PhoneNumber::set_raw_input(::std::string&& value) {
  set_has_raw_input();
  raw_input_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneNumber.raw_input)
}
#endif
inline void PhoneNumber::set_raw_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_input();
  raw_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumber.raw_input)
}
inline void PhoneNumber::set_raw_input(const char* value, size_t size) {
  set_has_raw_input();
  raw_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumber.raw_input)
}
inline ::std::string* PhoneNumber::mutable_raw_input() {
  set_has_raw_input();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.raw_input)
  return raw_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneNumber::release_raw_input() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.raw_input)
  if (!has_raw_input()) {
    return NULL;
  }
  clear_has_raw_input();
  return raw_input_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneNumber::set_allocated_raw_input(::std::string* raw_input) {
  if (raw_input != NULL) {
    set_has_raw_input();
  } else {
    clear_has_raw_input();
  }
  raw_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_input);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.raw_input)
}

// optional .i18n.phonenumbers.PhoneNumber.CountryCodeSource country_code_source = 6;
inline bool PhoneNumber::has_country_code_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PhoneNumber::set_has_country_code_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PhoneNumber::clear_has_country_code_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PhoneNumber::clear_country_code_source() {
  country_code_source_ = 0;
  clear_has_country_code_source();
}
inline ::i18n::phonenumbers::PhoneNumber_CountryCodeSource PhoneNumber::country_code_source() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.country_code_source)
  return static_cast< ::i18n::phonenumbers::PhoneNumber_CountryCodeSource >(country_code_source_);
}
inline void PhoneNumber::set_country_code_source(::i18n::phonenumbers::PhoneNumber_CountryCodeSource value) {
  assert(::i18n::phonenumbers::PhoneNumber_CountryCodeSource_IsValid(value));
  set_has_country_code_source();
  country_code_source_ = value;
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.country_code_source)
}

// optional string preferred_domestic_carrier_code = 7;
inline bool PhoneNumber::has_preferred_domestic_carrier_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhoneNumber::set_has_preferred_domestic_carrier_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhoneNumber::clear_has_preferred_domestic_carrier_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhoneNumber::clear_preferred_domestic_carrier_code() {
  preferred_domestic_carrier_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_domestic_carrier_code();
}
inline const ::std::string& PhoneNumber::preferred_domestic_carrier_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  return preferred_domestic_carrier_code_.GetNoArena();
}
inline void PhoneNumber::set_preferred_domestic_carrier_code(const ::std::string& value) {
  set_has_preferred_domestic_carrier_code();
  preferred_domestic_carrier_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}
#if LANG_CXX11
inline void PhoneNumber::set_preferred_domestic_carrier_code(::std::string&& value) {
  set_has_preferred_domestic_carrier_code();
  preferred_domestic_carrier_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}
#endif
inline void PhoneNumber::set_preferred_domestic_carrier_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_domestic_carrier_code();
  preferred_domestic_carrier_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}
inline void PhoneNumber::set_preferred_domestic_carrier_code(const char* value, size_t size) {
  set_has_preferred_domestic_carrier_code();
  preferred_domestic_carrier_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}
inline ::std::string* PhoneNumber::mutable_preferred_domestic_carrier_code() {
  set_has_preferred_domestic_carrier_code();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  return preferred_domestic_carrier_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneNumber::release_preferred_domestic_carrier_code() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
  if (!has_preferred_domestic_carrier_code()) {
    return NULL;
  }
  clear_has_preferred_domestic_carrier_code();
  return preferred_domestic_carrier_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneNumber::set_allocated_preferred_domestic_carrier_code(::std::string* preferred_domestic_carrier_code) {
  if (preferred_domestic_carrier_code != NULL) {
    set_has_preferred_domestic_carrier_code();
  } else {
    clear_has_preferred_domestic_carrier_code();
  }
  preferred_domestic_carrier_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_domestic_carrier_code);
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumber.preferred_domestic_carrier_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonenumbers
}  // namespace i18n

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::i18n::phonenumbers::PhoneNumber_CountryCodeSource> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_phonenumber_2eproto
